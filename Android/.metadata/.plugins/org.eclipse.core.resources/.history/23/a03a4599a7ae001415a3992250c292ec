package com.atguigu.exer;

public class TestProduceConsume {
	Clerk clerk = new Clerk();
	Producer p = new Producer(clerk);
	Consumer c = new Consumer(clerk);
	
	Thread t1 = new Thread(p, "Producer1");
	Thread t3 = new Thread(c, "=======> Consumer1");
	

}

class Clerk {
	private int product;
	
	public synchronized void addProduct() {
		if (product >= 10) {
			try {
				System.out.println(Thread.currentThread().getName() + " need wait...");
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			product++;
			System.out.println(Thread.currentThread().getName() + " produce No." + product);
			notifyAll();
		}
	}
	
	public synchronized void consumeProduct() {
		if (product <= 0) {
			try {
				System.out.println(Thread.currentThread().getName() + " need wait...");
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			product--;
			System.out.println(Thread.currentThread().getName() + " consume No." + product);
			notifyAll();
		}
	}
}

class Producer implements Runnable {
	private Clerk clerk;

	public Producer(Clerk clerk) {
		super();
		this.clerk = clerk;
	}
	
	public void run() {
		this.clerk.addProduct();
	}
}

class Consumer implements Runnable {
	private Clerk clerk;

	public Consumer(Clerk clerk) {
		super();
		this.clerk = clerk;
	}
	
	public void run() {
		this.clerk.consumeProduct();
	}
}