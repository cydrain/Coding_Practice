/* 
 * Given a singly linked list L: L0→L1→…→Ln-1→Ln,
 * reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
 *
 * You must do this in-place without altering the nodes' values.
 * For example,
 * Given {1,2,3,4}, reorder it to {1,4,2,3}. 
 */

class Solution {
public:
    void reorderList(ListNode* head) {
        if (!head || !head->next) return;
        ListNode *slow = head, *fast = head;
        ListNode *h2, *t2, *n1, *n2;
        // find the middle node
        while (fast->next && fast->next->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        // reverse list2
        h2 = t2 = slow->next;
        slow->next = NULL;
        while (t2->next) {
            n2 = t2->next;
            t2->next = n2->next;
            n2->next = h2;
            h2 = n2;
        }
        // insert l2 into l1
        n1 = head;
        while (h2) {
            n2 = h2;
            h2 = n2->next;
            n2->next = n1->next;
            n1->next = n2;
            n1 = n2->next;
        }
    }
};
